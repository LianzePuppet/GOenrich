#step1:数据导入
a<-Oryzasebase#将Oryzasebase表导入
#a<-a[which(a$MSU!="Na"&a$TO!="Na"),]#进行了筛选之后就不会在TO的结果中出现Na了
a<-as.data.frame(a)#转化为数据框
rownames(a) <- seq(1,nrow(a),1)#a的行号进行重新排序
#step2:得到TOlist
aTO<-c()
#保留17415行
TOlist<-c()
for(i in 1:nrow(a)){#对于每一行
  str<-a$TO[i]
  aTO_i<-c(strsplit(str,","))#对于某一行TO进行分隔，提取其中的TO
  aTO<-append(aTO,aTO_i)#aTO当中的每一个元素是一个向量，每一个向量是某一行所有TO
  TOlist<-c(TOlist,aTO[i][[1]])#真正把所有TO串起来
}
TOlist<-unique(TOlist)#12334到517个TO
TOlist<-TOlist[-which(TOlist=="Na")]


#step3：querying去重，得到相应基因行[querying的输入不是以数据框形式输入，而是以向量形式输入]
#######【querying<-read.table(file="C:/Users/hp/Desktop/summer vacation/3_Rpackage/querying gene set.txt",sep='\t')#读取querying数据框】#######
querying<-c("LOC_Os01g56200.2","LOC_Os01g56200.1","LOC_Os01g59680.1","LOC_Os03g06410.1","LOC_Os11g12340.2","LOC_Os11g29190.5","LOC_Os11g29190.4","LOC_Os11g29190","LOC_Osp1g00270 ","LOC_Os01g28450.1","LOC_Os09g22450.1","LOC_Os02g32160.1","LOC_Os05g30530.1","LOC_Os03g07580.1")#输入了14个【有重复基因的】

#得到每一行的位置
#library(tidyverse)#使用tidyverse包
	#grepl("*TO:0025025*",a$MSU[1])
	#TRUE
loc<-c()
for(i in 1: length(querying)){
for(j in 1: nrow(a)){
if(a$MSU[j]=="Na"){next;}
if(grepl(querying[i],a$MSU[j])=="TRUE"){
loc<-append(loc,j)}
#grepl(querying[4],a$MSU[1175])
}
}

loc<-unique(loc)

#loc
#[1]  4793 16761  5182  1003 12183  2449  5395 16386 10594 13491[恰好10个]

#data1<-a[loc,]
#View(data1)


m<-length(loc)
M<-nrow(a)
p.value<-c()
ratio<-c()
BgRatio<-c()
q.value<-c()
location<-c()#返回的是测试数据中非"0/11"的位置，共有18个，除去Na有17个


for(i in 1:length(TOlist)){#对于每一个TO
  n=0
  N=0
  TO<-TOlist[i]
  for(j in 1:m){#求出n
    msu<-aTO[[loc[j]]]
    if(TO%in%msu==TRUE){
      n=n+1}}
  if(n!=0){
    location<-append(location,i)
  }

  for(k in 1:nrow(a)){
    msu<-aTO[[k]]
    if(TO%in%msu)
      N<-N+1}
  pvalue<-phyper(n-1, N, M-N, m, lower.tail=FALSE)
  p.value<-append(p.value,pvalue)#均有518个

  ratio<-append(ratio,paste(n,"/",m,sep=''))#均有518个

  BgRatio<-append(BgRatio,paste(N,"/",M,sep=''))#均有518个

}

p.value<-p.value[location]
ratio<-ratio[location]
ONTOLOGY<-TOlist[location]
BgRatio<-BgRatio[location]


p.adjust<-p.adjust(p.value, method = 'fdr', n = length(p.value))

for(i in 1:length(p.value)){
  q.value[i]=p.value[i]*length(p.value)/rank(p.value[i])
}

data<-data.frame(ONTOLOGY=ONTOLOGY,ratio=ratio,BgRatio=BgRatio,p.value=p.value,p.adjust=p.adjust,q.value=q.value)
#p.adjust 40 p.value41
data<-data[which(data$p.adjust<0.05),]
#2个
rownames(data) <- seq(1,nrow(data),1)
View(data)
